#!/usr/bin/env python

"""
@autogenerated_warning@
@autogenerated_timestamp@
@PACKAGE@ @VERSION@
@PACKAGE_URL@
"""

"""
Create-SSHA-Password

Copyright (C) 2016 Assaf Gordon <assafgordon@gmail.com>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


NOTE:
A shell-only alternative mentioned here:
  https://www.nginx.com/resources/wiki/community/faq/

PASSWORD="SEcRe7PwD"
SALT="$(openssl rand -base64 3)"
SHA1=$(printf "$PASSWORD$SALT" \
          | openssl dgst -binary -sha1 \
          | xxd -ps \
          | sed 's#$#'"`echo -n $SALT | xxd -ps`"'#' | xxd -r -ps | base64);printf "Jim:{SSHA}$SHA1\n")
"""

import hashlib, os, sys, argparse
from base64 import encodestring as encode
from base64 import decodestring as decode
from getpass import getpass

def parse_command_line():
    # Define parameters
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Creates SSHA password lines",
        epilog="""

This script outputs encrypted passwords in {SSHA} syntax (RFC 2307 passwords schemes)
Example:

   $ create-ssha-passwd.py -u gordon -c -p FOOBAR
   gordon:{SSHA}eZ5abvhRmIovNAqbBOYixF79zh2YS/jo:FOOBAR

This line can be added to an 'htpasswd' file, and used from NGINX with:

   auth_basic "Secure Zone" ;
   auth_basic_user_file "/path/to/htpasswd";

More info:
   http://www.openldap.org/faq/data/cache/347.html
   https://www.nginx.com/resources/wiki/community/faq/
        """)

    # Option parameters
    parser.add_argument("-v", "--verbose", help="be verbose", action="store_true")
    parser.add_argument("-p", "--password", metavar="PASSWORD",
                        help="use password from command-line (INSECURE!)")
    parser.add_argument("-u", "--user", help="print username as first field")
    parser.add_argument("-c", "--comment", help="store clear-text password as comment (third field)",
                        action="store_true")

    # Positional parameter
    args = parser.parse_args()
    return args


def makeSecret(password):
    salt = os.urandom(4)
    h = hashlib.sha1(password)
    h.update(salt)
    return "{SSHA}" + encode(h.digest() + salt)[:-1]


def get_password():
    pw1 = getpass("Enter password: ")
    pw2 = getpass("Repeat password: ")
    if pw1 != pw2:
        sys.exit("passwords don't match! aborting.")
    return pw1


if __name__ == "__main__":
    args = parse_command_line()
    if args.password:
        password = args.password
    else:
        password = get_password()

    hashed_pw = makeSecret(password)

    result = ""
    if args.user:
        result = args.user + ":"
    result = result + hashed_pw
    if args.comment:
        result = result + ":" + password

    print result
